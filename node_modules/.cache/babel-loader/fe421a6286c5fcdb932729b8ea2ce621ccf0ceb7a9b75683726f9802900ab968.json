{"ast":null,"code":"import { useMediaQuery } from '../useMediaQuery';\n/**\n * Checks if screen is in `portrait` or `landscape` orientation.\n *\n * As `Screen Orientation API` is still experimental and not supported by Safari, this\n * hook uses CSS3 `orientation` media-query to check screen orientation.\n */\nexport function useScreenOrientation(options) {\n  var _options$initializeWi;\n  var matches = useMediaQuery('(orientation: portrait)', {\n    initializeWithValue: (_options$initializeWi = options === null || options === void 0 ? void 0 : options.initializeWithValue) !== null && _options$initializeWi !== void 0 ? _options$initializeWi : true\n  });\n  return matches === undefined ? undefined : matches ? 'portrait' : 'landscape';\n}","map":{"version":3,"names":["useMediaQuery","useScreenOrientation","options","_options$initializeWi","matches","initializeWithValue","undefined"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/node_modules/@react-hookz/web/esm/useScreenOrientation/index.js"],"sourcesContent":["import { useMediaQuery } from '../useMediaQuery';\n/**\n * Checks if screen is in `portrait` or `landscape` orientation.\n *\n * As `Screen Orientation API` is still experimental and not supported by Safari, this\n * hook uses CSS3 `orientation` media-query to check screen orientation.\n */\nexport function useScreenOrientation(options) {\n    const matches = useMediaQuery('(orientation: portrait)', {\n        initializeWithValue: options?.initializeWithValue ?? true,\n    });\n    return matches === undefined ? undefined : matches ? 'portrait' : 'landscape';\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,OAAO,EAAE;EAAA,IAAAC,qBAAA;EAC1C,IAAMC,OAAO,GAAGJ,aAAa,CAAC,yBAAyB,EAAE;IACrDK,mBAAmB,GAAAF,qBAAA,GAAED,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,mBAAmB,cAAAF,qBAAA,cAAAA,qBAAA,GAAI;EACzD,CAAC,CAAC;EACF,OAAOC,OAAO,KAAKE,SAAS,GAAGA,SAAS,GAAGF,OAAO,GAAG,UAAU,GAAG,WAAW;AACjF"},"metadata":{},"sourceType":"module","externalDependencies":[]}