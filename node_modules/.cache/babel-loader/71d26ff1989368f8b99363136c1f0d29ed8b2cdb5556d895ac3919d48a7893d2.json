{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trs_user\\\\Documents\\\\my\\\\bntu-library\\\\src\\\\variables\\\\affilations.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const tableColumns = [{\n  Header: \"ID Open Alex\",\n  accessor: \"id\"\n}, {\n  Header: \"ROR аффиляции\",\n  accessor: \"ror\"\n}, {\n  Header: \"Аффиляция\",\n  accessor: \"display_name\"\n}, {\n  Header: \"Аббревиатура\",\n  accessor: \"display_name_acronym\"\n}, {\n  Header: \"Количество публикаций\",\n  accessor: \"works_count\"\n}, {\n  Header: \"Цитирования\",\n  accessor: \"cited_by_count\"\n}, {\n  Header: \"Публикации и цитирования по годам\",\n  accessor: \"counts_by_year\"\n}, {\n  Header: \"URL\",\n  accessor: \"homepage_url\"\n}, {\n  Header: \"Wikipedia\",\n  accessor: \"wikipedia\"\n}, {\n  Header: \"Wikidata\",\n  accessor: \"wikidata\"\n}, {\n  Header: \"Код страны\",\n  accessor: \"country_code\"\n}, {\n  Header: \"Город\",\n  accessor: \"geo_city\"\n}, {\n  Header: \"ID города\",\n  accessor: \"geo_city_id\"\n}, {\n  Header: \"Страна\",\n  accessor: \"geo_country\"\n}, {\n  Header: \"Тип аффиляции\",\n  accessor: \"type\"\n}, {\n  Header: \"Тематика исследований\",\n  accessor: \"concepts_name\"\n}, {\n  Header: \"Альтернативные названия\",\n  accessor: \"international_names\"\n}];\nexport const searchFieldsList = [{\n  id: 1,\n  name: \"Аффиляция\",\n  key: \"ror\"\n}, {\n  id: 2,\n  name: \"Название организации\",\n  key: \"display_name.search\"\n}, {\n  id: 3,\n  name: \"Тип организации\",\n  key: \"type\"\n}, {\n  id: 4,\n  name: \"Код страны\",\n  key: \"country_code\"\n}];\nexport const filtersList = tableColumns.map(item => ({\n  text: item.Header,\n  id: item.accessor\n}));\nconst filtersByDefaultNames = [\"Автор\", \"Количество публикаций\", \"h-индекс\", \"Код страны\"];\nexport const filtersByDefault = filtersList.filter(item => filtersByDefaultNames.some(name => name === item.text));\nexport const getTransformedData = data => data.map(item => {\n  var _item$display_name_ac, _item$counts_by_year, _item$ids, _item$ids2, _item$geo, _item$geo2, _item$geo3, _item$x_concepts;\n  return {\n    id: (item === null || item === void 0 ? void 0 : item.id) && /*#__PURE__*/_jsxDEV(\"a\", {\n      href: item.id,\n      target: \"_blank\",\n      rel: \"noreferrer\",\n      children: item.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this) || \"-\",\n    ror: (item === null || item === void 0 ? void 0 : item.ror) || \"-\",\n    display_name: (item === null || item === void 0 ? void 0 : item.display_name) || \"-\",\n    display_name_acronym: (item === null || item === void 0 ? void 0 : (_item$display_name_ac = item.display_name_acronyms) === null || _item$display_name_ac === void 0 ? void 0 : _item$display_name_ac.find(x => x !== undefined)) || \"-\",\n    works_count: (item === null || item === void 0 ? void 0 : item.works_count) || \"-\",\n    cited_by_count: (item === null || item === void 0 ? void 0 : item.cited_by_count) || \"-\",\n    counts_by_year: (item === null || item === void 0 ? void 0 : (_item$counts_by_year = item.counts_by_year) === null || _item$counts_by_year === void 0 ? void 0 : _item$counts_by_year.reduce((accumulator, currentValue) => accumulator + (accumulator === '' ? '' : ';') + ' год:' + currentValue.year + \", публикаций:\" + currentValue.works_count + \", цитат:\" + currentValue.cited_by_count, '')) || \"-\",\n    homepage_url: (item === null || item === void 0 ? void 0 : item.homepage_url) || \"-\",\n    wikipedia: (item === null || item === void 0 ? void 0 : (_item$ids = item.ids) === null || _item$ids === void 0 ? void 0 : _item$ids.wikipedia) || \"-\",\n    wikidata: (item === null || item === void 0 ? void 0 : (_item$ids2 = item.ids) === null || _item$ids2 === void 0 ? void 0 : _item$ids2.wikidata) || \"-\",\n    country_code: (item === null || item === void 0 ? void 0 : item.country_code) || \"-\",\n    geo_city: (item === null || item === void 0 ? void 0 : (_item$geo = item.geo) === null || _item$geo === void 0 ? void 0 : _item$geo.city) || \"-\",\n    geo_city_id: (item === null || item === void 0 ? void 0 : (_item$geo2 = item.geo) === null || _item$geo2 === void 0 ? void 0 : _item$geo2.geonames_city_id) || \"-\",\n    geo_country: (item === null || item === void 0 ? void 0 : (_item$geo3 = item.geo) === null || _item$geo3 === void 0 ? void 0 : _item$geo3.country) || \"-\",\n    type: (item === null || item === void 0 ? void 0 : item.type) || \"-\",\n    concepts_name: (item === null || item === void 0 ? void 0 : (_item$x_concepts = item.x_concepts) === null || _item$x_concepts === void 0 ? void 0 : _item$x_concepts.reduce((accumulator, currentValue) => accumulator + (accumulator === '' ? '' : ', ') + currentValue.display_name, '')) || \"-\"\n    //international_names: item?.international?.display_name?.reduce((accumulator, currentValue) => accumulator + (accumulator === '' ? '' : ', ') + currentValue.display_name, '') || \"-\", // need return all rows\n  };\n});","map":{"version":3,"names":["tableColumns","Header","accessor","searchFieldsList","id","name","key","filtersList","map","item","text","filtersByDefaultNames","filtersByDefault","filter","some","getTransformedData","data","_item$display_name_ac","_item$counts_by_year","_item$ids","_item$ids2","_item$geo","_item$geo2","_item$geo3","_item$x_concepts","_jsxDEV","href","target","rel","children","fileName","_jsxFileName","lineNumber","columnNumber","ror","display_name","display_name_acronym","display_name_acronyms","find","x","undefined","works_count","cited_by_count","counts_by_year","reduce","accumulator","currentValue","year","homepage_url","wikipedia","ids","wikidata","country_code","geo_city","geo","city","geo_city_id","geonames_city_id","geo_country","country","type","concepts_name","x_concepts"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/src/variables/affilations.js"],"sourcesContent":["export const tableColumns = [\r\n  {\r\n    Header: \"ID Open Alex\",\r\n    accessor: \"id\",\r\n  },\r\n  {\r\n    Header: \"ROR аффиляции\",\r\n    accessor: \"ror\",\r\n  },\r\n  {\r\n    Header: \"Аффиляция\",\r\n    accessor: \"display_name\",\r\n  },\r\n  {\r\n    Header: \"Аббревиатура\",\r\n    accessor: \"display_name_acronym\",\r\n  },\r\n  {\r\n    Header: \"Количество публикаций\",\r\n    accessor: \"works_count\",\r\n  },\r\n  {\r\n    Header: \"Цитирования\",\r\n    accessor: \"cited_by_count\",\r\n  },\r\n  {\r\n    Header: \"Публикации и цитирования по годам\",\r\n    accessor: \"counts_by_year\",\r\n  },\r\n  {\r\n    Header: \"URL\",\r\n    accessor: \"homepage_url\",\r\n  },\r\n  {\r\n    Header: \"Wikipedia\",\r\n    accessor: \"wikipedia\",\r\n  },\r\n  {\r\n    Header: \"Wikidata\",\r\n    accessor: \"wikidata\",\r\n  },\r\n  {\r\n    Header: \"Код страны\",\r\n    accessor: \"country_code\",\r\n  },\r\n  {\r\n    Header: \"Город\",\r\n    accessor: \"geo_city\",\r\n  },\r\n  {\r\n    Header: \"ID города\",\r\n    accessor: \"geo_city_id\",\r\n  },\r\n  {\r\n    Header: \"Страна\",\r\n    accessor: \"geo_country\",\r\n  },\r\n  {\r\n    Header: \"Тип аффиляции\",\r\n    accessor: \"type\",\r\n  },\r\n  {\r\n    Header: \"Тематика исследований\",\r\n    accessor: \"concepts_name\",\r\n  },\r\n  {\r\n    Header: \"Альтернативные названия\",\r\n    accessor: \"international_names\",\r\n  },\r\n];\r\n\r\nexport const searchFieldsList = [\r\n  { id: 1, name: \"Аффиляция\", key: \"ror\" },\r\n  { id: 2, name: \"Название организации\", key: \"display_name.search\" },\r\n  { id: 3, name: \"Тип организации\", key: \"type\" },\r\n  { id: 4, name: \"Код страны\", key: \"country_code\" },\r\n];\r\n\r\nexport const filtersList = tableColumns.map((item) => ({\r\n  text: item.Header,\r\n  id: item.accessor,\r\n}));\r\n\r\nconst filtersByDefaultNames = [\r\n  \"Автор\",\r\n  \"Количество публикаций\",\r\n  \"h-индекс\",\r\n  \"Код страны\",\r\n];\r\n\r\nexport const filtersByDefault = filtersList.filter((item) =>\r\n  filtersByDefaultNames.some((name) => name === item.text)\r\n);\r\n\r\nexport const getTransformedData = (data) =>\r\n  data.map((item) => ({\r\n    id:\r\n      (item?.id && (\r\n        <a href={item.id} target=\"_blank\" rel=\"noreferrer\">\r\n          {item.id}\r\n        </a>\r\n      )) ||\r\n      \"-\",\r\n    ror: item?.ror || \"-\",\r\n    display_name: item?.display_name || \"-\",\r\n    display_name_acronym: item?.display_name_acronyms?.find(x=>x!==undefined) || \"-\",\r\n    works_count: item?.works_count || \"-\",\r\n    cited_by_count: item?.cited_by_count || \"-\",\r\n    counts_by_year: item?.counts_by_year?.reduce((accumulator, currentValue) => accumulator + (accumulator === '' ? '' : ';') + ' год:' + currentValue.year + \", публикаций:\" + currentValue.works_count + \", цитат:\" + currentValue.cited_by_count, '') || \"-\",\r\n    homepage_url: item?.homepage_url || \"-\",\r\n    wikipedia: item?.ids?.wikipedia || \"-\",\r\n    wikidata: item?.ids?.wikidata || \"-\",\r\n    country_code: item?.country_code || \"-\",\r\n    geo_city: item?.geo?.city || \"-\",\r\n    geo_city_id: item?.geo?.geonames_city_id || \"-\",\r\n    geo_country: item?.geo?.country || \"-\",\r\n    type: item?.type || \"-\",\r\n    concepts_name: item?.x_concepts?.reduce((accumulator, currentValue) => accumulator + (accumulator === '' ? '' : ', ') + currentValue.display_name, '') || \"-\",\r\n    //international_names: item?.international?.display_name?.reduce((accumulator, currentValue) => accumulator + (accumulator === '' ? '' : ', ') + currentValue.display_name, '') || \"-\", // need return all rows\r\n  }));"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}