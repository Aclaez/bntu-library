{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\trs_user\\\\Documents\\\\my\\\\bntu-library\\\\src\\\\components\\\\ExcelExportBtn\\\\index.js\";\nimport React from \"react\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst transformData = (columns, data) => {\n  const oldKeys = Object.keys(data === null || data === void 0 ? void 0 : data[0]);\n  let newKeys = [];\n  oldKeys.forEach(key => {\n    const column = columns.find(column => column.accessor === key);\n    newKeys.push(column.Header);\n  });\n  return data.map(item => {\n    const newItem = {};\n    oldKeys.forEach((key, index) => {\n      newItem[newKeys[index]] = item[key];\n      delete item[key];\n    });\n    return {\n      ...newItem,\n      ...item\n    };\n  });\n};\nfunction ExcelExportBtn(_ref) {\n  let {\n    csvData,\n    columns,\n    fileName,\n    closeMenu\n  } = _ref;\n  const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n  const fileExtension = \".xlsx\";\n  const correctData = transformData(columns, csvData);\n  const exportToCSV = (correctData, fileName) => {\n    const ws = XLSX.utils.json_to_sheet(correctData);\n    const wb = {\n      Sheets: {\n        data: ws\n      },\n      SheetNames: [\"data\"]\n    };\n    const excelBuffer = XLSX.write(wb, {\n      bookType: \"xlsx\",\n      type: \"array\"\n    });\n    const data = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => {\n      closeMenu();\n      exportToCSV(correctData, fileName);\n    },\n    children: \"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442 \\u0432 Excel\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c = ExcelExportBtn;\nexport default ExcelExportBtn;\nvar _c;\n$RefreshReg$(_c, \"ExcelExportBtn\");","map":{"version":3,"names":["React","FileSaver","XLSX","jsxDEV","_jsxDEV","transformData","columns","data","oldKeys","Object","keys","newKeys","forEach","key","column","find","accessor","push","Header","map","item","newItem","index","ExcelExportBtn","_ref","csvData","fileName","closeMenu","fileType","fileExtension","correctData","exportToCSV","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","Blob","saveAs","onClick","children","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/src/components/ExcelExportBtn/index.js"],"sourcesContent":["import React from \"react\";\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nconst transformData = (columns, data) => {\r\n  const oldKeys = Object.keys(data?.[0]);\r\n\r\n  let newKeys = [];\r\n\r\n  oldKeys.forEach((key) => {\r\n    const column = columns.find((column) => column.accessor === key);\r\n    newKeys.push(column.Header);\r\n  });\r\n\r\n  return data.map((item) => {\r\n    const newItem = {};\r\n    oldKeys.forEach((key, index) => {\r\n      newItem[newKeys[index]] = item[key];\r\n      delete item[key];\r\n    });\r\n    return { ...newItem, ...item };\r\n  });\r\n};\r\n\r\nfunction ExcelExportBtn({ csvData, columns, fileName, closeMenu }) {\r\n  const fileType =\r\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n  const fileExtension = \".xlsx\";\r\n\r\n  const correctData = transformData(columns, csvData);\r\n\r\n  const exportToCSV = (correctData, fileName) => {\r\n    const ws = XLSX.utils.json_to_sheet(correctData);\r\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n  };\r\n\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        closeMenu();\r\n        exportToCSV(correctData, fileName);\r\n      }}\r\n    >\r\n      Экспорт в Excel\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default ExcelExportBtn;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,SAAS,MAAM,YAAY;AACvC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAACC,OAAO,EAAEC,IAAI,KAAK;EACvC,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAG,CAAC,CAAC,CAAC;EAEtC,IAAII,OAAO,GAAG,EAAE;EAEhBH,OAAO,CAACI,OAAO,CAAEC,GAAG,IAAK;IACvB,MAAMC,MAAM,GAAGR,OAAO,CAACS,IAAI,CAAED,MAAM,IAAKA,MAAM,CAACE,QAAQ,KAAKH,GAAG,CAAC;IAChEF,OAAO,CAACM,IAAI,CAACH,MAAM,CAACI,MAAM,CAAC;EAC7B,CAAC,CAAC;EAEF,OAAOX,IAAI,CAACY,GAAG,CAAEC,IAAI,IAAK;IACxB,MAAMC,OAAO,GAAG,CAAC,CAAC;IAClBb,OAAO,CAACI,OAAO,CAAC,CAACC,GAAG,EAAES,KAAK,KAAK;MAC9BD,OAAO,CAACV,OAAO,CAACW,KAAK,CAAC,CAAC,GAAGF,IAAI,CAACP,GAAG,CAAC;MACnC,OAAOO,IAAI,CAACP,GAAG,CAAC;IAClB,CAAC,CAAC;IACF,OAAO;MAAE,GAAGQ,OAAO;MAAE,GAAGD;IAAK,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC;AAED,SAASG,cAAcA,CAAAC,IAAA,EAA4C;EAAA,IAA3C;IAAEC,OAAO;IAAEnB,OAAO;IAAEoB,QAAQ;IAAEC;EAAU,CAAC,GAAAH,IAAA;EAC/D,MAAMI,QAAQ,GACZ,iFAAiF;EACnF,MAAMC,aAAa,GAAG,OAAO;EAE7B,MAAMC,WAAW,GAAGzB,aAAa,CAACC,OAAO,EAAEmB,OAAO,CAAC;EAEnD,MAAMM,WAAW,GAAGA,CAACD,WAAW,EAAEJ,QAAQ,KAAK;IAC7C,MAAMM,EAAE,GAAG9B,IAAI,CAAC+B,KAAK,CAACC,aAAa,CAACJ,WAAW,CAAC;IAChD,MAAMK,EAAE,GAAG;MAAEC,MAAM,EAAE;QAAE7B,IAAI,EAAEyB;MAAG,CAAC;MAAEK,UAAU,EAAE,CAAC,MAAM;IAAE,CAAC;IACzD,MAAMC,WAAW,GAAGpC,IAAI,CAACqC,KAAK,CAACJ,EAAE,EAAE;MAAEK,QAAQ,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAQ,CAAC,CAAC;IACvE,MAAMlC,IAAI,GAAG,IAAImC,IAAI,CAAC,CAACJ,WAAW,CAAC,EAAE;MAAEG,IAAI,EAAEb;IAAS,CAAC,CAAC;IACxD3B,SAAS,CAAC0C,MAAM,CAACpC,IAAI,EAAEmB,QAAQ,GAAGG,aAAa,CAAC;EAClD,CAAC;EAED,oBACEzB,OAAA;IACEwC,OAAO,EAAEA,CAAA,KAAM;MACbjB,SAAS,EAAE;MACXI,WAAW,CAACD,WAAW,EAAEJ,QAAQ,CAAC;IACpC,CAAE;IAAAmB,QAAA,EACH;EAED;IAAAnB,QAAA,EAAAoB,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAS;AAEb;AAACC,EAAA,GAzBQ1B,cAAc;AA2BvB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}