{"ast":null,"code":"import { useMemo } from 'react';\nimport { useMediatedState } from '../useMediatedState';\nimport { useSyncedRef } from '../useSyncedRef';\nimport { resolveHookState } from \"../util/resolveHookState.js\";\n/**\n * Tracks a numeric value.\n *\n * @param initialValue The initial value of the counter.\n * @param max The maximum value the counter is allowed to reach.\n *            If `initialValue` is greater than `max`, then `max` is set as the initial value.\n * @param min The minimum value the counter is allowed to reach.\n *            If `initialValue` is smaller than `min`, then `min` is set as the initial value.\n */\nexport function useCounter() {\n  let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let max = arguments.length > 1 ? arguments[1] : undefined;\n  let min = arguments.length > 2 ? arguments[2] : undefined;\n  const [state, setState] = useMediatedState(initialValue, v => {\n    if (max !== undefined) {\n      v = Math.min(max, v);\n    }\n    if (min !== undefined) {\n      v = Math.max(min, v);\n    }\n    return v;\n  });\n  const stateRef = useSyncedRef(state);\n  return [state, useMemo(() => ({\n    get: () => stateRef.current,\n    set: setState,\n    dec: function () {\n      let delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      setState(val => val - resolveHookState(delta, val));\n    },\n    inc: function () {\n      let delta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      setState(val => val + resolveHookState(delta, val));\n    },\n    reset: function () {\n      let val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialValue;\n      setState(v => resolveHookState(val, v));\n    }\n  }), [initialValue, setState, stateRef])];\n}","map":{"version":3,"names":["useMemo","useMediatedState","useSyncedRef","resolveHookState","useCounter","initialValue","arguments","length","undefined","max","min","state","setState","v","Math","stateRef","get","current","set","dec","delta","val","inc","reset"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/node_modules/@react-hookz/web/esm/useCounter/index.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { useMediatedState } from '../useMediatedState';\nimport { useSyncedRef } from '../useSyncedRef';\nimport { resolveHookState } from \"../util/resolveHookState.js\";\n/**\n * Tracks a numeric value.\n *\n * @param initialValue The initial value of the counter.\n * @param max The maximum value the counter is allowed to reach.\n *            If `initialValue` is greater than `max`, then `max` is set as the initial value.\n * @param min The minimum value the counter is allowed to reach.\n *            If `initialValue` is smaller than `min`, then `min` is set as the initial value.\n */\nexport function useCounter(initialValue = 0, max, min) {\n    const [state, setState] = useMediatedState(initialValue, (v) => {\n        if (max !== undefined) {\n            v = Math.min(max, v);\n        }\n        if (min !== undefined) {\n            v = Math.max(min, v);\n        }\n        return v;\n    });\n    const stateRef = useSyncedRef(state);\n    return [\n        state,\n        useMemo(() => ({\n            get: () => stateRef.current,\n            set: setState,\n            dec: (delta = 1) => {\n                setState((val) => val - resolveHookState(delta, val));\n            },\n            inc: (delta = 1) => {\n                setState((val) => val + resolveHookState(delta, val));\n            },\n            reset: (val = initialValue) => {\n                setState((v) => resolveHookState(val, v));\n            },\n        }), [initialValue, setState, stateRef]),\n    ];\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAA,EAA6B;EAAA,IAA5BC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEG,GAAG,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEE,GAAG,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACjD,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGX,gBAAgB,CAACI,YAAY,EAAGQ,CAAC,IAAK;IAC5D,IAAIJ,GAAG,KAAKD,SAAS,EAAE;MACnBK,CAAC,GAAGC,IAAI,CAACJ,GAAG,CAACD,GAAG,EAAEI,CAAC,CAAC;IACxB;IACA,IAAIH,GAAG,KAAKF,SAAS,EAAE;MACnBK,CAAC,GAAGC,IAAI,CAACL,GAAG,CAACC,GAAG,EAAEG,CAAC,CAAC;IACxB;IACA,OAAOA,CAAC;EACZ,CAAC,CAAC;EACF,MAAME,QAAQ,GAAGb,YAAY,CAACS,KAAK,CAAC;EACpC,OAAO,CACHA,KAAK,EACLX,OAAO,CAAC,OAAO;IACXgB,GAAG,EAAEA,CAAA,KAAMD,QAAQ,CAACE,OAAO;IAC3BC,GAAG,EAAEN,QAAQ;IACbO,GAAG,EAAE,SAAAA,CAAA,EAAe;MAAA,IAAdC,KAAK,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MACXM,QAAQ,CAAES,GAAG,IAAKA,GAAG,GAAGlB,gBAAgB,CAACiB,KAAK,EAAEC,GAAG,CAAC,CAAC;IACzD,CAAC;IACDC,GAAG,EAAE,SAAAA,CAAA,EAAe;MAAA,IAAdF,KAAK,GAAAd,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MACXM,QAAQ,CAAES,GAAG,IAAKA,GAAG,GAAGlB,gBAAgB,CAACiB,KAAK,EAAEC,GAAG,CAAC,CAAC;IACzD,CAAC;IACDE,KAAK,EAAE,SAAAA,CAAA,EAAwB;MAAA,IAAvBF,GAAG,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGD,YAAY;MACtBO,QAAQ,CAAEC,CAAC,IAAKV,gBAAgB,CAACkB,GAAG,EAAER,CAAC,CAAC,CAAC;IAC7C;EACJ,CAAC,CAAC,EAAE,CAACR,YAAY,EAAEO,QAAQ,EAAEG,QAAQ,CAAC,CAAC,CAC1C;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}