{"ast":null,"code":"import { useEffect } from 'react';\nimport { isEqual } from '@react-hookz/deep-equal';\nimport { useCustomCompareEffect } from '../useCustomCompareEffect';\n/**\n * Like `useEffect`, but uses `@react-hookz/deep-equal` comparator function to validate deep\n * dependency changes.\n *\n * @param callback Function that will be passed to the underlying effect hook.\n * @param deps Dependency list like the one passed to `useEffect`.\n * @param effectHook Effect hook that will be used to run\n * `callback`. Must match the type signature of `useEffect`, meaning that the `callback` should be\n * placed as the first argument and the dependency list as second.\n * @param effectHookRestArgs Extra arguments that are passed to the `effectHook`\n * after the `callback` and the dependency list.\n */\nexport function useDeepCompareEffect(callback, deps) {\n  var effectHook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : useEffect;\n  for (var _len = arguments.length, effectHookRestArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    effectHookRestArgs[_key - 3] = arguments[_key];\n  }\n  return useCustomCompareEffect.apply(void 0, [callback, deps, isEqual, effectHook].concat(effectHookRestArgs));\n}","map":{"version":3,"names":["useEffect","isEqual","useCustomCompareEffect","useDeepCompareEffect","callback","deps","effectHook","arguments","length","undefined","_len","effectHookRestArgs","Array","_key","apply","concat"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/node_modules/@react-hookz/web/esm/useDeepCompareEffect/index.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { isEqual } from '@react-hookz/deep-equal';\nimport { useCustomCompareEffect } from '../useCustomCompareEffect';\n/**\n * Like `useEffect`, but uses `@react-hookz/deep-equal` comparator function to validate deep\n * dependency changes.\n *\n * @param callback Function that will be passed to the underlying effect hook.\n * @param deps Dependency list like the one passed to `useEffect`.\n * @param effectHook Effect hook that will be used to run\n * `callback`. Must match the type signature of `useEffect`, meaning that the `callback` should be\n * placed as the first argument and the dependency list as second.\n * @param effectHookRestArgs Extra arguments that are passed to the `effectHook`\n * after the `callback` and the dependency list.\n */\nexport function useDeepCompareEffect(callback, deps, effectHook = useEffect, ...effectHookRestArgs) {\n    return useCustomCompareEffect(callback, deps, isEqual, effectHook, ...effectHookRestArgs);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,sBAAsB,QAAQ,2BAA2B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAACC,QAAQ,EAAEC,IAAI,EAAiD;EAAA,IAA/CC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,SAAS;EAAA,SAAAU,IAAA,GAAAH,SAAA,CAAAC,MAAA,EAAKG,kBAAkB,OAAAC,KAAA,CAAAF,IAAA,OAAAA,IAAA,WAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;IAAlBF,kBAAkB,CAAAE,IAAA,QAAAN,SAAA,CAAAM,IAAA;EAAA;EAC9F,OAAOX,sBAAsB,CAAAY,KAAA,UAACV,QAAQ,EAAEC,IAAI,EAAEJ,OAAO,EAAEK,UAAU,EAAAS,MAAA,CAAKJ,kBAAkB,EAAC;AAC7F"},"metadata":{},"sourceType":"module","externalDependencies":[]}