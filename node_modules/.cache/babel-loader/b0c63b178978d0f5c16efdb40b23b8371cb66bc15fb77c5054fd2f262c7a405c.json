{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { isBrowser } from \"../util/const.js\";\nimport { off, on } from \"../util/misc.js\";\nconst navigator = isBrowser ? window.navigator : undefined;\nconst conn = navigator && (navigator.connection || navigator.mozConnection || navigator.webkitConnection);\nfunction getConnectionState(previousState) {\n  const online = navigator?.onLine;\n  const previousOnline = previousState?.online;\n  return {\n    online,\n    previous: previousOnline,\n    since: online === previousOnline ? previousState?.since : new Date(),\n    downlink: conn?.downlink,\n    downlinkMax: conn?.downlinkMax,\n    effectiveType: conn?.effectiveType,\n    rtt: conn?.rtt,\n    saveData: conn?.saveData,\n    type: conn?.type\n  };\n}\n/**\n * Tracks the state of browser's network connection.\n */\nexport function useNetworkState(initialState) {\n  const [state, setState] = useState(initialState ?? getConnectionState);\n  useEffect(() => {\n    const handleStateChange = () => {\n      setState(getConnectionState);\n    };\n    on(window, 'online', handleStateChange, {\n      passive: true\n    });\n    on(window, 'offline', handleStateChange, {\n      passive: true\n    });\n    // it is quite hard to test it in jsdom environment maybe will be improved in future\n    /* istanbul ignore next */\n    if (conn) {\n      on(conn, 'change', handleStateChange, {\n        passive: true\n      });\n    }\n    return () => {\n      off(window, 'online', handleStateChange);\n      off(window, 'offline', handleStateChange);\n      /* istanbul ignore next */\n      if (conn) {\n        off(conn, 'change', handleStateChange);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return state;\n}","map":{"version":3,"names":["useEffect","useState","isBrowser","off","on","navigator","window","undefined","conn","connection","mozConnection","webkitConnection","getConnectionState","previousState","online","onLine","previousOnline","previous","since","Date","downlink","downlinkMax","effectiveType","rtt","saveData","type","useNetworkState","initialState","state","setState","handleStateChange","passive"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/node_modules/@react-hookz/web/esm/useNetworkState/index.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { isBrowser } from \"../util/const.js\";\nimport { off, on } from \"../util/misc.js\";\nconst navigator = isBrowser ? window.navigator : undefined;\nconst conn = navigator && (navigator.connection || navigator.mozConnection || navigator.webkitConnection);\nfunction getConnectionState(previousState) {\n    const online = navigator?.onLine;\n    const previousOnline = previousState?.online;\n    return {\n        online,\n        previous: previousOnline,\n        since: online === previousOnline ? previousState?.since : new Date(),\n        downlink: conn?.downlink,\n        downlinkMax: conn?.downlinkMax,\n        effectiveType: conn?.effectiveType,\n        rtt: conn?.rtt,\n        saveData: conn?.saveData,\n        type: conn?.type,\n    };\n}\n/**\n * Tracks the state of browser's network connection.\n */\nexport function useNetworkState(initialState) {\n    const [state, setState] = useState(initialState ?? getConnectionState);\n    useEffect(() => {\n        const handleStateChange = () => {\n            setState(getConnectionState);\n        };\n        on(window, 'online', handleStateChange, { passive: true });\n        on(window, 'offline', handleStateChange, { passive: true });\n        // it is quite hard to test it in jsdom environment maybe will be improved in future\n        /* istanbul ignore next */\n        if (conn) {\n            on(conn, 'change', handleStateChange, { passive: true });\n        }\n        return () => {\n            off(window, 'online', handleStateChange);\n            off(window, 'offline', handleStateChange);\n            /* istanbul ignore next */\n            if (conn) {\n                off(conn, 'change', handleStateChange);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return state;\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,GAAG,EAAEC,EAAE,QAAQ,iBAAiB;AACzC,MAAMC,SAAS,GAAGH,SAAS,GAAGI,MAAM,CAACD,SAAS,GAAGE,SAAS;AAC1D,MAAMC,IAAI,GAAGH,SAAS,KAAKA,SAAS,CAACI,UAAU,IAAIJ,SAAS,CAACK,aAAa,IAAIL,SAAS,CAACM,gBAAgB,CAAC;AACzG,SAASC,kBAAkBA,CAACC,aAAa,EAAE;EACvC,MAAMC,MAAM,GAAGT,SAAS,EAAEU,MAAM;EAChC,MAAMC,cAAc,GAAGH,aAAa,EAAEC,MAAM;EAC5C,OAAO;IACHA,MAAM;IACNG,QAAQ,EAAED,cAAc;IACxBE,KAAK,EAAEJ,MAAM,KAAKE,cAAc,GAAGH,aAAa,EAAEK,KAAK,GAAG,IAAIC,IAAI,EAAE;IACpEC,QAAQ,EAAEZ,IAAI,EAAEY,QAAQ;IACxBC,WAAW,EAAEb,IAAI,EAAEa,WAAW;IAC9BC,aAAa,EAAEd,IAAI,EAAEc,aAAa;IAClCC,GAAG,EAAEf,IAAI,EAAEe,GAAG;IACdC,QAAQ,EAAEhB,IAAI,EAAEgB,QAAQ;IACxBC,IAAI,EAAEjB,IAAI,EAAEiB;EAChB,CAAC;AACL;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,YAAY,EAAE;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC0B,YAAY,IAAIf,kBAAkB,CAAC;EACtEZ,SAAS,CAAC,MAAM;IACZ,MAAM8B,iBAAiB,GAAGA,CAAA,KAAM;MAC5BD,QAAQ,CAACjB,kBAAkB,CAAC;IAChC,CAAC;IACDR,EAAE,CAACE,MAAM,EAAE,QAAQ,EAAEwB,iBAAiB,EAAE;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;IAC1D3B,EAAE,CAACE,MAAM,EAAE,SAAS,EAAEwB,iBAAiB,EAAE;MAAEC,OAAO,EAAE;IAAK,CAAC,CAAC;IAC3D;IACA;IACA,IAAIvB,IAAI,EAAE;MACNJ,EAAE,CAACI,IAAI,EAAE,QAAQ,EAAEsB,iBAAiB,EAAE;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;IAC5D;IACA,OAAO,MAAM;MACT5B,GAAG,CAACG,MAAM,EAAE,QAAQ,EAAEwB,iBAAiB,CAAC;MACxC3B,GAAG,CAACG,MAAM,EAAE,SAAS,EAAEwB,iBAAiB,CAAC;MACzC;MACA,IAAItB,IAAI,EAAE;QACNL,GAAG,CAACK,IAAI,EAAE,QAAQ,EAAEsB,iBAAiB,CAAC;MAC1C;IACJ,CAAC;IACD;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,OAAOF,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}