{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nimport { useSyncedRef } from '../useSyncedRef';\nvar cancelTimeout = function cancelTimeout(id) {\n  if (id) {\n    clearTimeout(id);\n  }\n};\n/**\n * Like `setTimeout` but in the form of a react hook.\n *\n * @param callback Callback to be called after the timeout. Changing this\n * will not reset the timeout.\n * @param ms Timeout delay in milliseconds. `undefined` disables the timeout.\n * Keep in mind, that changing this parameter will re-set timeout, meaning\n * that it will be set as new after the change.\n */\nexport function useTimeoutEffect(callback, ms) {\n  var cbRef = useSyncedRef(callback);\n  var msRef = useSyncedRef(ms);\n  var timeoutIdRef = useRef(null);\n  var cancel = useCallback(function () {\n    cancelTimeout(timeoutIdRef.current);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var reset = useCallback(function () {\n    if (msRef.current === undefined) return;\n    cancel();\n    timeoutIdRef.current = setTimeout(function () {\n      return cbRef.current();\n    }, msRef.current);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    reset();\n    return cancel;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ms]);\n  return [cancel, reset];\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","useSyncedRef","cancelTimeout","id","clearTimeout","useTimeoutEffect","callback","ms","cbRef","msRef","timeoutIdRef","cancel","current","reset","undefined","setTimeout"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/node_modules/@react-hookz/web/esm/useTimeoutEffect/index.js"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { useSyncedRef } from '../useSyncedRef';\nconst cancelTimeout = (id) => {\n    if (id) {\n        clearTimeout(id);\n    }\n};\n/**\n * Like `setTimeout` but in the form of a react hook.\n *\n * @param callback Callback to be called after the timeout. Changing this\n * will not reset the timeout.\n * @param ms Timeout delay in milliseconds. `undefined` disables the timeout.\n * Keep in mind, that changing this parameter will re-set timeout, meaning\n * that it will be set as new after the change.\n */\nexport function useTimeoutEffect(callback, ms) {\n    const cbRef = useSyncedRef(callback);\n    const msRef = useSyncedRef(ms);\n    const timeoutIdRef = useRef(null);\n    const cancel = useCallback(() => {\n        cancelTimeout(timeoutIdRef.current);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const reset = useCallback(() => {\n        if (msRef.current === undefined)\n            return;\n        cancel();\n        timeoutIdRef.current = setTimeout(() => cbRef.current(), msRef.current);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    useEffect(() => {\n        reset();\n        return cancel;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [ms]);\n    return [cancel, reset];\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACtD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,EAAE,EAAK;EAC1B,IAAIA,EAAE,EAAE;IACJC,YAAY,CAACD,EAAE,CAAC;EACpB;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,gBAAgBA,CAACC,QAAQ,EAAEC,EAAE,EAAE;EAC3C,IAAMC,KAAK,GAAGP,YAAY,CAACK,QAAQ,CAAC;EACpC,IAAMG,KAAK,GAAGR,YAAY,CAACM,EAAE,CAAC;EAC9B,IAAMG,YAAY,GAAGV,MAAM,CAAC,IAAI,CAAC;EACjC,IAAMW,MAAM,GAAGb,WAAW,CAAC,YAAM;IAC7BI,aAAa,CAACQ,YAAY,CAACE,OAAO,CAAC;IACnC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,IAAMC,KAAK,GAAGf,WAAW,CAAC,YAAM;IAC5B,IAAIW,KAAK,CAACG,OAAO,KAAKE,SAAS,EAC3B;IACJH,MAAM,EAAE;IACRD,YAAY,CAACE,OAAO,GAAGG,UAAU,CAAC;MAAA,OAAMP,KAAK,CAACI,OAAO,EAAE;IAAA,GAAEH,KAAK,CAACG,OAAO,CAAC;IACvE;EACJ,CAAC,EAAE,EAAE,CAAC;EACNb,SAAS,CAAC,YAAM;IACZc,KAAK,EAAE;IACP,OAAOF,MAAM;IACb;EACJ,CAAC,EAAE,CAACJ,EAAE,CAAC,CAAC;EACR,OAAO,CAACI,MAAM,EAAEE,KAAK,CAAC;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}