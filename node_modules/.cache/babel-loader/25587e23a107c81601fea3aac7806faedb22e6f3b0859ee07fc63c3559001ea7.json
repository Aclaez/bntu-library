{"ast":null,"code":"import _slicedToArray from \"C:/Users/trs_user/Documents/my/bntu-library/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState } from 'react';\nimport { useResizeObserver } from '../useResizeObserver';\nimport { useHookableRef } from '../useHookableRef';\nimport { useRafCallback } from '../useRafCallback';\n/**\n * Uses ResizeObserver to track element dimensions and re-render component when they change.\n *\n * @param enabled Whether resize observer is enabled or not.\n */\nexport function useMeasure() {\n  var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    element = _useState2[0],\n    setElement = _useState2[1];\n  var elementRef = useHookableRef(null, function (v) {\n    setElement(v);\n    return v;\n  });\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    measures = _useState4[0],\n    setMeasures = _useState4[1];\n  var _useRafCallback = useRafCallback(function (entry) {\n      return setMeasures({\n        width: entry.contentRect.width,\n        height: entry.contentRect.height\n      });\n    }),\n    _useRafCallback2 = _slicedToArray(_useRafCallback, 1),\n    observerHandler = _useRafCallback2[0];\n  useResizeObserver(element, observerHandler, enabled);\n  return [measures, elementRef];\n}","map":{"version":3,"names":["useState","useResizeObserver","useHookableRef","useRafCallback","useMeasure","enabled","arguments","length","undefined","_useState","_useState2","_slicedToArray","element","setElement","elementRef","v","_useState3","_useState4","measures","setMeasures","_useRafCallback","entry","width","contentRect","height","_useRafCallback2","observerHandler"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/node_modules/@react-hookz/web/esm/useMeasure/index.js"],"sourcesContent":["import { useState } from 'react';\nimport { useResizeObserver } from '../useResizeObserver';\nimport { useHookableRef } from '../useHookableRef';\nimport { useRafCallback } from '../useRafCallback';\n/**\n * Uses ResizeObserver to track element dimensions and re-render component when they change.\n *\n * @param enabled Whether resize observer is enabled or not.\n */\nexport function useMeasure(enabled = true) {\n    const [element, setElement] = useState(null);\n    const elementRef = useHookableRef(null, (v) => {\n        setElement(v);\n        return v;\n    });\n    const [measures, setMeasures] = useState();\n    const [observerHandler] = useRafCallback((entry) => setMeasures({ width: entry.contentRect.width, height: entry.contentRect.height }));\n    useResizeObserver(element, observerHandler, enabled);\n    return [measures, elementRef];\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,cAAc,QAAQ,mBAAmB;AAClD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAA,EAAiB;EAAA,IAAhBC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACrC,IAAAG,SAAA,GAA8BT,QAAQ,CAAC,IAAI,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAC1B,IAAMI,UAAU,GAAGZ,cAAc,CAAC,IAAI,EAAE,UAACa,CAAC,EAAK;IAC3CF,UAAU,CAACE,CAAC,CAAC;IACb,OAAOA,CAAC;EACZ,CAAC,CAAC;EACF,IAAAC,UAAA,GAAgChB,QAAQ,EAAE;IAAAiB,UAAA,GAAAN,cAAA,CAAAK,UAAA;IAAnCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,eAAA,GAA0BjB,cAAc,CAAC,UAACkB,KAAK;MAAA,OAAKF,WAAW,CAAC;QAAEG,KAAK,EAAED,KAAK,CAACE,WAAW,CAACD,KAAK;QAAEE,MAAM,EAAEH,KAAK,CAACE,WAAW,CAACC;MAAO,CAAC,CAAC;IAAA,EAAC;IAAAC,gBAAA,GAAAd,cAAA,CAAAS,eAAA;IAA/HM,eAAe,GAAAD,gBAAA;EACtBxB,iBAAiB,CAACW,OAAO,EAAEc,eAAe,EAAErB,OAAO,CAAC;EACpD,OAAO,CAACa,QAAQ,EAAEJ,UAAU,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}