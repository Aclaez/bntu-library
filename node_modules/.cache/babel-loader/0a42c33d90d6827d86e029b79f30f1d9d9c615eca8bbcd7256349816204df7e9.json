{"ast":null,"code":"import { useRef, useState } from 'react';\nimport { useUpdateEffect } from '../useUpdateEffect';\nimport { isStrictEqual } from \"../util/const.js\";\n/**\n * Returns the most recent _distinct_ value passed to the hook on previous render. Distinct here\n * means that the hook's return value will only update when the passed value updates. This is\n * useful when other renders are involved potentially making multiple, irrelevant updates.\n *\n * Yields `undefined` on first render.\n *\n * @param value Value to yield on next render if it's different from the previous one.\n * @param predicate Optional predicate to determine if the value is distinct. If not provided,\n * the value will be updated if it is strictly equal (`===`) to the previous value.\n */\nexport function usePreviousDistinct(value) {\n  let predicate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : isStrictEqual;\n  const [previousState, setPreviousState] = useState();\n  const currentRef = useRef(value);\n  useUpdateEffect(() => {\n    if (!predicate(currentRef.current, value)) {\n      setPreviousState(currentRef.current);\n      currentRef.current = value;\n    }\n  }, [value]);\n  return previousState;\n}","map":{"version":3,"names":["useRef","useState","useUpdateEffect","isStrictEqual","usePreviousDistinct","value","predicate","arguments","length","undefined","previousState","setPreviousState","currentRef","current"],"sources":["C:/Users/trs_user/Documents/my/bntu-library/node_modules/@react-hookz/web/esm/usePreviousDistinct/index.js"],"sourcesContent":["import { useRef, useState } from 'react';\nimport { useUpdateEffect } from '../useUpdateEffect';\nimport { isStrictEqual } from \"../util/const.js\";\n/**\n * Returns the most recent _distinct_ value passed to the hook on previous render. Distinct here\n * means that the hook's return value will only update when the passed value updates. This is\n * useful when other renders are involved potentially making multiple, irrelevant updates.\n *\n * Yields `undefined` on first render.\n *\n * @param value Value to yield on next render if it's different from the previous one.\n * @param predicate Optional predicate to determine if the value is distinct. If not provided,\n * the value will be updated if it is strictly equal (`===`) to the previous value.\n */\nexport function usePreviousDistinct(value, predicate = isStrictEqual) {\n    const [previousState, setPreviousState] = useState();\n    const currentRef = useRef(value);\n    useUpdateEffect(() => {\n        if (!predicate(currentRef.current, value)) {\n            setPreviousState(currentRef.current);\n            currentRef.current = value;\n        }\n    }, [value]);\n    return previousState;\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,aAAa,QAAQ,kBAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,KAAK,EAA6B;EAAA,IAA3BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGJ,aAAa;EAChE,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,EAAE;EACpD,MAAMW,UAAU,GAAGZ,MAAM,CAACK,KAAK,CAAC;EAChCH,eAAe,CAAC,MAAM;IAClB,IAAI,CAACI,SAAS,CAACM,UAAU,CAACC,OAAO,EAAER,KAAK,CAAC,EAAE;MACvCM,gBAAgB,CAACC,UAAU,CAACC,OAAO,CAAC;MACpCD,UAAU,CAACC,OAAO,GAAGR,KAAK;IAC9B;EACJ,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACX,OAAOK,aAAa;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}